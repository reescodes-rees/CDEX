# Generated by Django 5.2.3 on 2025-06-20 08:24

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Game",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="e.g., Pok√©mon TCG, Magic: The Gathering, NBA Basketball Cards",
                        max_length=100,
                        unique=True,
                    ),
                ),
                ("slug", models.SlugField(blank=True, max_length=120, unique=True)),
                ("description", models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name="Card",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "card_name",
                    models.CharField(
                        help_text="e.g., Charizard, LeBron James", max_length=255
                    ),
                ),
                (
                    "set_name",
                    models.CharField(
                        blank=True, help_text="e.g., Base Set, Prizm", max_length=255
                    ),
                ),
                (
                    "year",
                    models.PositiveIntegerField(
                        blank=True, help_text="e.g., 1999, 2020", null=True
                    ),
                ),
                (
                    "card_identifier_in_set",
                    models.CharField(
                        blank=True, help_text="e.g., 4/102, #23", max_length=50
                    ),
                ),
                (
                    "attributes",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text='Flexible key-value pairs, e.g., {"Holo": true, "Edition": "1st", "Player": "Michael Jordan"}',
                    ),
                ),
                (
                    "condition",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("M", "Mint"),
                            ("NM", "Near Mint"),
                            ("LP", "Lightly Played"),
                            ("MP", "Moderately Played"),
                            ("HP", "Heavily Played"),
                            ("DMG", "Damaged"),
                        ],
                        max_length=3,
                    ),
                ),
                ("is_graded", models.BooleanField(default=False)),
                (
                    "grader",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PSA", "PSA"),
                            ("BGS", "Beckett (BGS/BCCG)"),
                            ("SGC", "SGC"),
                            ("CGC", "CGC"),
                            ("CGS", "Card Grading Service"),
                            ("OTHER", "Other"),
                        ],
                        max_length=10,
                        null=True,
                    ),
                ),
                (
                    "grade",
                    models.CharField(
                        blank=True,
                        help_text="e.g., 9, 10 Gem Mint, 8.5",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "certification_number",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "purchase_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Optional: Price you paid for this card.",
                        max_digits=10,
                        null=True,
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="Your private notes about this card instance.",
                    ),
                ),
                (
                    "image_1",
                    models.ImageField(
                        blank=True,
                        help_text="Primary image of your card.",
                        null=True,
                        upload_to="card_images/",
                    ),
                ),
                (
                    "image_2",
                    models.ImageField(
                        blank=True,
                        help_text="Optional secondary image.",
                        null=True,
                        upload_to="card_images/",
                    ),
                ),
                (
                    "image_3",
                    models.ImageField(
                        blank=True,
                        help_text="Optional tertiary image.",
                        null=True,
                        upload_to="card_images/",
                    ),
                ),
                ("date_added_to_collection", models.DateTimeField(auto_now_add=True)),
                ("last_modified", models.DateTimeField(auto_now=True)),
                (
                    "owner",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="card_collection",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "game",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="cards",
                        to="listings.game",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Listing",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "listing_type",
                    models.CharField(
                        choices=[
                            ("SALE", "For Sale"),
                            ("TRADE", "For Trade"),
                            ("AUCTION", "Auction"),
                        ],
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("ACTIVE", "Active"),
                            ("SOLD", "Sold"),
                            ("TRADED", "Traded"),
                            ("EXPIRED", "Expired"),
                            ("CANCELLED", "Cancelled"),
                            ("PENDING", "Pending Review"),
                        ],
                        default="ACTIVE",
                        max_length=10,
                    ),
                ),
                (
                    "price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Required if listing_type is 'Sale'.",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "trade_preference_description",
                    models.TextField(
                        blank=True,
                        help_text="Describe what you're looking for in a trade.",
                    ),
                ),
                (
                    "auction_start_price",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        help_text="Required if listing_type is 'Auction'.",
                        max_digits=12,
                        null=True,
                    ),
                ),
                (
                    "auction_bid_increment",
                    models.DecimalField(
                        decimal_places=2,
                        default=1.0,
                        help_text="Minimum amount by which a new bid must exceed the current one.",
                        max_digits=10,
                    ),
                ),
                (
                    "auction_end_datetime",
                    models.DateTimeField(
                        blank=True,
                        help_text="Date and time when the auction ends.",
                        null=True,
                    ),
                ),
                (
                    "current_highest_bid",
                    models.DecimalField(
                        blank=True, decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "listing_description",
                    models.TextField(
                        blank=True,
                        help_text="Additional details about this specific listing.",
                    ),
                ),
                ("seller_location_city", models.CharField(blank=True, max_length=100)),
                (
                    "seller_location_region",
                    models.CharField(
                        blank=True, help_text="e.g., State, Province", max_length=100
                    ),
                ),
                (
                    "seller_location_country",
                    models.CharField(blank=True, max_length=100),
                ),
                ("allows_local_pickup", models.BooleanField(default=True)),
                (
                    "shipping_policy_description",
                    models.TextField(
                        blank=True,
                        help_text="Describe shipping terms, costs, regions (e.g., 'Ships to USA via USPS. Buyer pays $5 flat shipping').",
                    ),
                ),
                ("views_count", models.PositiveIntegerField(default=0)),
                ("date_created", models.DateTimeField(auto_now_add=True)),
                (
                    "expires_on",
                    models.DateTimeField(
                        blank=True,
                        help_text="Optional: Date when the listing should automatically expire.",
                        null=True,
                    ),
                ),
                ("last_modified", models.DateTimeField(auto_now=True)),
                (
                    "card_for_listing",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="listed_as",
                        to="listings.card",
                    ),
                ),
                (
                    "current_high_bidder",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="current_bids_as_high_bidder",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "lister",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="listings",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Bid",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("amount", models.DecimalField(decimal_places=2, max_digits=12)),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "bidder",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bids_made",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "listing",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="bids",
                        to="listings.listing",
                    ),
                ),
            ],
            options={
                "ordering": ["-timestamp"],
            },
        ),
    ]
